/**
 * JSONSchema Validator - Validates JavaScript objects using JSON Schemas
 *	(http://www.json.com/json-schema-proposal/)
 *
 * Copyright (c) 2007 Kris Zyp SitePen (www.sitepen.com)
 * Licensed under the MIT (MIT-LICENSE.txt) license.
To use the validator call JSONSchema.validate with an instance object and an optional schema object.
If a schema is provided, it will be used to validate. If the instance object refers to a schema (self-validating),
that schema will be used to validate and the schema parameter is not necessary (if both exist,
both validations will occur).
The validate method will return an array of validation errors. If there are no errors, then an
empty list will be returned. A validation error will have two properties:
"property" which indicates which property had the error
"message" which indicates what the error was
 */

define("preview/jsonSchema",[],function(){var e={validate:function(e,t){return this._validate(e,t,!1)},checkPropertyChange:function(e,t,n){return this._validate(e,t,n||"property")},_validate:function(e,t,n){function a(e,t,o,m){function s(e){i.push({property:o,message:e})}function f(e,t){if(e){if(!("string"!=typeof e||"any"==e||("null"==e?null===t:typeof t==e)||t instanceof Array&&"array"==e||"integer"==e&&t%1===0))return[{property:o,message:typeof t+" value found, but a "+e+" is required"}];if(e instanceof Array){for(var n=[],r=0;r<e.length&&(n=f(e[r],t)).length;r++);if(n.length)return n}else if("object"==typeof e){var m=i;i=[],a(t,e,o);var s=i;return i=m,s}}return[]}var c;if(o+=o?"number"==typeof m?"["+m+"]":"undefined"==typeof m?"":"."+m:m,("object"!=typeof t||t instanceof Array)&&(o||"function"!=typeof t))return"function"==typeof t?e instanceof t||s("is not an instance of the class/constructor "+t.name):t&&s("Invalid schema/property definition "+t),null;if(n&&t.readonly&&s("is a readonly field, it can not be changed"),t.extends&&a(e,t.extends,o,m),void 0===e)t.optional||s("is missing and it is not optional");else if(i=i.concat(f(t.type,e)),t.disallow&&!f(t.disallow,e).length&&s(" disallowed value was matched"),null!==e){if(e instanceof Array){if(t.items)if(t.items instanceof Array)for(m=0,c=e.length;m<c;m++)i.concat(a(e[m],t.items[m],o,m));else for(m=0,c=e.length;m<c;m++)i.concat(a(e[m],t.items,o,m));t.minItems&&e.length<t.minItems&&s("There must be a minimum of "+t.minItems+" in the array"),t.maxItems&&e.length>t.maxItems&&s("There must be a maximum of "+t.maxItems+" in the array")}else t.properties&&i.concat(r(e,t.properties,o,t.additionalProperties));if(t.pattern&&"string"==typeof e&&!e.match(t.pattern)&&s("does not match the regex pattern "+t.pattern),t.maxLength&&"string"==typeof e&&e.length>t.maxLength&&s("may only be "+t.maxLength+" characters long"),t.minLength&&"string"==typeof e&&e.length<t.minLength&&s("must be at least "+t.minLength+" characters long"),void 0!==typeof t.minimum&&typeof e==typeof t.minimum&&t.minimum>e&&s("must have a minimum value of "+t.minimum),void 0!==typeof t.maximum&&typeof e==typeof t.maximum&&t.maximum<e&&s("must have a maximum value of "+t.maximum),t.enum){var p=t.enum;c=p.length;for(var u,h=0;h<c;h++)if(p[h]===e){u=1;break}u||s("does not have a value in the enumeration "+p.join(", "))}"number"==typeof t.maxDecimal&&e.toString().match(new RegExp("\\.[0-9]{"+(t.maxDecimal+1)+",}"))&&s("may only have "+t.maxDecimal+" digits of decimal places")}return null}function r(e,t,r,o){if("object"==typeof t){("object"!=typeof e||e instanceof Array)&&i.push({property:r,message:"an object is required"});for(var m in t)if(t.hasOwnProperty(m)&&("_"!=m.charAt(0)||"_"!=m.charAt(1))){var s=e[m],f=t[m];a(s,f,r,m)}}for(m in e){!e.hasOwnProperty(m)||"_"==m.charAt(0)&&"_"==m.charAt(1)||!t||t[m]||o!==!1||i.push({property:r,message:typeof s+"The property "+m+" is not defined in the schema and the schema does not allow additional properties"});var c=t&&t[m]&&t[m].requires;!c||c in e||i.push({property:r,message:"the presence of the property "+m+" requires that "+c+" also be present"}),s=e[m],!t||"object"!=typeof t||m in t||a(s,o,r,m),!n&&s&&s.$schema&&(i=i.concat(a(s,s.$schema,r,m)))}return i}var i=[];return t&&a(e,t,"",n||""),!n&&e&&e.$schema&&a(e,e.$schema,"",""),{valid:!i.length,errors:i}}};return e});